// Docs: https://www.instantdb.com/docs/modeling-data

import { i } from "@instantdb/react-native";

const _schema = i.schema({
  // We inferred 1 attribute!
  // Take a look at this schema, and if everything looks good,
  // run `push schema` again to enforce the types.
  entities: {
    $files: i.entity({
      path: i.string().unique().indexed(),
      url: i.string(),
    }),
    $users: i.entity({
      email: i.string().unique().indexed().optional(),
    }),
    addresses: i.entity({
      city: i.string(),
      country: i.string().optional(),
      createdAt: i.date(),
      isDefault: i.boolean().optional(),
      name: i.string(),
      phone: i.string().optional(),
      state: i.string(),
      street: i.string(),
      updatedAt: i.date().optional(),
      userId: i.string().indexed(),
      zipCode: i.string(),
    }),
    brands: i.entity({
      name: i.string().unique().indexed(),
    }),
    cart: i.entity({
      createdAt: i.date(),
      image: i.string().optional(),
      itemId: i.string().indexed().optional(),
      price: i.number(),
      productId: i.string().indexed(),
      quantity: i.number(),
      sessionId: i.string().indexed().optional(),
      sku: i.string().optional(),
      title: i.string(),
      updatedAt: i.date().optional(),
      userId: i.string().indexed().optional(),
      variantTitle: i.string().optional(),
    }),
    categories: i.entity({
      name: i.string().unique().indexed(),
      parent: i.string().optional(),
    }),
    collections: i.entity({
      createdAt: i.date(),
      description: i.string().optional(),
      image: i.string().optional(),
      isActive: i.boolean(),
      name: i.string().unique().indexed(),
      parent: i.string().optional(),
      pos: i.boolean().optional(),
      sortOrder: i.number().optional(),
      updatedAt: i.date(),
    }),
    customers: i.entity({
      addresses: i.json().optional(),
      createdAt: i.date().indexed(),
      defaultAddress: i.any().optional(),
      email: i.string().indexed().optional(),
      lastOrderDate: i.date().indexed().optional(),
      name: i.string(),
      notes: i.string().optional(),
      phone: i.string().indexed().optional(),
      tags: i.string().optional(),
      totalOrders: i.number().optional(),
      totalSpent: i.number().optional(),
      updatedAt: i.date().optional(),
    }),
    files: i.entity({
      alt: i.string().optional(),
      dateAdded: i.date(),
      handle: i.string().unique().indexed(),
      reference: i.string().optional(),
      size: i.number(),
      title: i.string(),
      type: i.string(),
      url: i.string(),
      userId: i.string().indexed().optional(),
    }),
    iadjust: i.entity({
      approvalNotes: i.string().optional(),
      approvedAt: i.date().indexed().optional(),
      approvedBy: i.string().indexed().optional(),
      batchId: i.string().indexed().optional(),
      createdAt: i.date().indexed(),
      deviceId: i.string().indexed().optional(),
      ipAddress: i.string().optional(),
      isReversed: i.boolean().indexed().optional(),
      itemId: i.string().indexed(),
      locationId: i.string().indexed(),
      notes: i.string().optional(),
      quantityAfter: i.number(),
      quantityBefore: i.number(),
      quantityChange: i.number(),
      reason: i.string().indexed().optional(),
      reference: i.string().indexed().optional(),
      requiresApproval: i.boolean().indexed().optional(),
      reversalReference: i.string().indexed().optional(),
      sessionId: i.string().indexed().optional(),
      totalCostImpact: i.number().optional(),
      type: i.string().indexed(),
      unitCost: i.number().optional(),
      userId: i.string().indexed().optional(),
      userName: i.string().indexed().optional(),
      userRole: i.string().indexed().optional(),
      version: i.number().optional(),
    }),
    ilocations: i.entity({
      available: i.number().indexed().optional(),
      committed: i.number().indexed().optional(),
      createdAt: i.date().indexed(),
      isActive: i.boolean().indexed().optional(),
      itemId: i.string().indexed(),
      lastCounted: i.date().indexed().optional(),
      lastCountedBy: i.string().indexed().optional(),
      lastCountQuantity: i.number().optional(),
      lastMovementDate: i.date().indexed().optional(),
      lastMovementReference: i.string().indexed().optional(),
      lastMovementType: i.string().indexed().optional(),
      lastReceived: i.date().indexed().optional(),
      lastReceivedBy: i.string().indexed().optional(),
      lastReceivedQuantity: i.number().optional(),
      locationId: i.string().indexed(),
      onHand: i.number().indexed().optional(),
      reorderLevel: i.number().indexed().optional(),
      reorderQuantity: i.number().optional(),
      unavailable: i.number().indexed().optional(),
      updatedAt: i.date().optional(),
      updatedBy: i.string().indexed().optional(),
      version: i.number().optional(),
    }),
    inventory: i.entity({
      available: i.number().indexed().optional(),
      createdAt: i.date(),
      itemId: i.string().indexed(),
      quantity: i.number().indexed().optional(),
      reserved: i.number().indexed().optional(),
      updatedAt: i.date(),
    }),
    items: i.entity({
      allowPreorder: i.boolean().optional(),
      available: i.number().optional(),
      barcode: i.string().indexed().optional(),
      committed: i.number().optional(),
      cost: i.number().optional(),
      createdAt: i.date().optional(),
      image: i.string().optional(),
      margin: i.number().optional(),
      metafields: i.any().optional(),
      onhand: i.number().optional(),
      option1: i.string().optional(),
      option2: i.string().optional(),
      option3: i.string().optional(),
      path: i.string().optional(),
      price: i.number().optional(),
      productId: i.string().indexed(),
      reorderlevel: i.number().optional(),
      saleprice: i.number().optional(),
      sku: i.string().indexed(),
      totalAvailable: i.number().indexed().optional(),
      totalCommitted: i.number().indexed().optional(),
      totalOnHand: i.number().indexed().optional(),
      trackQty: i.boolean().optional(),
      unavailable: i.number().optional(),
      updatedAt: i.date().optional(),
    }),
    locations: i.entity({
      address: i.any().optional(),
      contactInfo: i.any().optional(),
      createdAt: i.date().optional(),
      fulfillsOnlineOrders: i.boolean().optional(),
      isActive: i.boolean().optional(),
      isDefault: i.boolean().optional(),
      metafields: i.any().optional(),
      name: i.string(),
      type: i.string().optional(),
      updatedAt: i.date().optional(),
    }),
    media: i.entity({
      order: i.number().optional(),
      parentId: i.string().indexed(),
      type: i.string().optional(),
      url: i.string().optional(),
    }),
    metasets: i.entity({
      category: i.string().indexed(),
      config: i.any().optional(),
      createdAt: i.date(),
      description: i.string().optional(),
      filter: i.boolean().optional(),
      group: i.string().optional(),
      inputConfig: i.any().optional(),
      key: i.string().optional(),
      name: i.string(),
      namespace: i.string().optional(),
      order: i.number().optional(),
      parentId: i.string().optional(),
      required: i.boolean().optional(),
      title: i.string().optional(),
      type: i.string(),
      updatedAt: i.date(),
      value: i.string().optional(),
    }),
    metavalues: i.entity({
      createdAt: i.date(),
      entityId: i.string().indexed(),
      entityType: i.string().indexed(),
      setId: i.string().indexed(),
      updatedAt: i.date(),
      value: i.string().optional(),
    }),
    modifiers: i.entity({
      identifier: i.string().optional(),
      notes: i.string().optional(),
      title: i.string().optional(),
      type: i.string().optional(),
      value: i.number().optional(),
    }),
    opsets: i.entity({
      createdAt: i.date().optional(),
      name: i.string(),
      updatedAt: i.date().optional(),
    }),
    opvalues: i.entity({
      createdAt: i.date(),
      group: i.string().optional(),
      identifierType: i.string(),
      identifierValue: i.string(),
      name: i.string(),
      order: i.number().optional(),
      setId: i.string().indexed(),
      updatedAt: i.date(),
    }),
    orderitems: i.entity({
      compareAtPrice: i.number().optional(),
      cost: i.number().optional(),
      discountAmount: i.number().optional(),
      fulfillmentStatus: i.string().optional(),
      itemId: i.string().indexed().optional(),
      lineTotal: i.number(),
      orderId: i.string().indexed(),
      price: i.number(),
      productId: i.string().indexed().optional(),
      productImage: i.string().optional(),
      productType: i.string().optional(),
      qty: i.number().optional(),
      quantity: i.number(),
      sku: i.string().optional(),
      taxAmount: i.number().optional(),
      taxRate: i.number().optional(),
      title: i.string(),
      total: i.number().optional(),
      trackingNumber: i.string().optional(),
      trackingUrl: i.string().optional(),
      variantTitle: i.string().optional(),
      vendor: i.string().optional(),
    }),
    orders: i.entity({
      billingAddress: i.any().optional(),
      cancelledAt: i.date().optional(),
      closedAt: i.date().optional(),
      createdAt: i.date().indexed(),
      currency: i.string().optional(),
      customerEmail: i.string().optional(),
      customerId: i.string().indexed().optional(),
      customerName: i.string().optional(),
      customerPhone: i.string().optional(),
      deviceId: i.string().optional(),
      discount: i.number().optional(),
      discountAmount: i.number().optional(),
      discountCode: i.string().optional(),
      fulfill: i.string().optional(),
      fulfillmentStatus: i.string().indexed(),
      locationId: i.string().indexed().optional(),
      market: i.string().optional(),
      notes: i.string().optional(),
      orderNumber: i.string().unique().indexed(),
      paymentStatus: i.string().indexed(),
      receiptNumber: i.string().optional(),
      referenceId: i.string().unique().indexed(),
      referid: i.string().unique().indexed().optional(),
      shippingAddress: i.any().optional(),
      shippingAmount: i.number().optional(),
      source: i.string().optional(),
      staffId: i.string().optional(),
      status: i.string().indexed(),
      subtotal: i.number(),
      tags: i.string().optional(),
      taxAmount: i.number().optional(),
      total: i.number(),
      totalPaid: i.number().optional(),
      totalRefunded: i.number().optional(),
      updatedAt: i.date().optional(),
    }),
    path: i.entity({
      location: i.string().optional(),
      notes: i.string().optional(),
      parentId: i.string().indexed(),
      title: i.string().optional(),
    }),
    peoplea: i.entity({
      bio: i.string().optional(),
      createdAt: i.date(),
      name: i.string().optional(),
      phone: i.string().optional(),
      profileImage: i.string().optional(),
      updatedAt: i.date().optional(),
      userId: i.string().unique().indexed(),
    }),
    products: i.entity({
      barcode: i.string().indexed().optional(),
      blurb: i.string().optional(),
      brandId: i.string().indexed().optional(),
      categoryId: i.string().indexed().optional(),
      collectionId: i.string().indexed().optional(),
      cost: i.number().optional(),
      createdAt: i.date().indexed(),
      description: i.string().optional(),
      featured: i.boolean().indexed(),
      image: i.string().optional(),
      medias: i.any().optional(),
      metafields: i.any().optional(),
      modifiers: i.any().optional(),
      name: i.string().optional(),
      notes: i.string().optional(),
      options: i.any().optional(),
      pos: i.boolean().indexed(),
      price: i.number().optional(),
      promoinfo: i.any().optional(),
      publishAt: i.date().optional(),
      relproducts: i.any().optional(),
      saleinfo: i.any().optional(),
      saleprice: i.number().optional(),
      sellproducts: i.any().optional(),
      seo: i.any().optional(),
      sku: i.string().indexed().optional(),
      status: i.string().indexed(),
      stock: i.number().optional(),
      tags: i.string().indexed().optional(),
      title: i.string().indexed(),
      typeId: i.string().indexed().optional(),
      updatedAt: i.date().optional(),
      vendorId: i.string().indexed().optional(),
      website: i.boolean().indexed(),
    }),
    stocks: i.entity({
      available: i.number().optional(),
      committed: i.number().optional(),
      datetime: i.date().optional(),
      expdate: i.date().optional(),
      fifo: i.number().optional(),
      parentId: i.string().indexed(),
      path: i.string().optional(),
    }),
    tags: i.entity({
      createdAt: i.date().optional(),
      name: i.string().unique().indexed(),
      updatedAt: i.date().optional(),
    }),
    types: i.entity({
      name: i.string().unique().indexed(),
      parent: i.string().optional(),
    }),
    vendors: i.entity({
      name: i.string().unique().indexed(),
    }),
  },
  links: {
    cart$users: {
      forward: {
        on: "cart",
        has: "one",
        label: "$users",
      },
      reverse: {
        on: "$users",
        has: "many",
        label: "cart",
      },
    },
    cartItem: {
      forward: {
        on: "cart",
        has: "one",
        label: "item",
      },
      reverse: {
        on: "items",
        has: "many",
        label: "cart",
      },
    },
    cartProduct: {
      forward: {
        on: "cart",
        has: "one",
        label: "product",
      },
      reverse: {
        on: "products",
        has: "many",
        label: "cart",
      },
    },
    customersOrders: {
      forward: {
        on: "customers",
        has: "many",
        label: "orders",
      },
      reverse: {
        on: "orders",
        has: "one",
        label: "customer",
      },
    },
    files$users: {
      forward: {
        on: "files",
        has: "one",
        label: "$users",
      },
      reverse: {
        on: "$users",
        has: "many",
        label: "files",
      },
    },
    inventoryStocks: {
      forward: {
        on: "inventory",
        has: "many",
        label: "stocks",
      },
      reverse: {
        on: "stocks",
        has: "one",
        label: "inventory",
      },
    },
    itemsIadjust: {
      forward: {
        on: "items",
        has: "many",
        label: "iadjust",
      },
      reverse: {
        on: "iadjust",
        has: "one",
        label: "item",
      },
    },
    itemsIlocations: {
      forward: {
        on: "items",
        has: "many",
        label: "ilocations",
      },
      reverse: {
        on: "ilocations",
        has: "one",
        label: "item",
      },
    },
    locationsIadjust: {
      forward: {
        on: "locations",
        has: "many",
        label: "iadjust",
      },
      reverse: {
        on: "iadjust",
        has: "one",
        label: "location",
      },
    },
    locationsIlocations: {
      forward: {
        on: "locations",
        has: "many",
        label: "ilocations",
      },
      reverse: {
        on: "ilocations",
        has: "one",
        label: "location",
      },
    },
    orderitemsItem: {
      forward: {
        on: "orderitems",
        has: "one",
        label: "item",
      },
      reverse: {
        on: "items",
        has: "many",
        label: "orderitems",
      },
    },
    orderitemsProduct: {
      forward: {
        on: "orderitems",
        has: "one",
        label: "product",
      },
      reverse: {
        on: "products",
        has: "many",
        label: "orderitems",
      },
    },
    ordersLocation: {
      forward: {
        on: "orders",
        has: "one",
        label: "location",
      },
      reverse: {
        on: "locations",
        has: "many",
        label: "orders",
      },
    },
    ordersOrderitems: {
      forward: {
        on: "orders",
        has: "many",
        label: "orderitems",
      },
      reverse: {
        on: "orderitems",
        has: "one",
        label: "order",
      },
    },
    peoplea$users: {
      forward: {
        on: "peoplea",
        has: "one",
        label: "$users",
      },
      reverse: {
        on: "$users",
        has: "one",
        label: "peoplea",
      },
    },
    productsCollection: {
      forward: {
        on: "products",
        has: "one",
        label: "collection",
      },
      reverse: {
        on: "collections",
        has: "many",
        label: "products",
      },
    },
    productsItem: {
      forward: {
        on: "products",
        has: "many",
        label: "item",
      },
      reverse: {
        on: "items",
        has: "one",
        label: "product",
      },
    },
  },
  rooms: {},
});

// This helps Typescript display nicer intellisense
type _AppSchema = typeof _schema;
interface AppSchema extends _AppSchema {}
const schema: AppSchema = _schema;

export type { AppSchema };
export default schema;
